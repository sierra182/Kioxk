@using System.IO
@using System.Net.Http
@using System.Threading
@inject HttpClient Http
@inject IJSRuntime js;

<div id="carreph" class="carre" onclick="scaler('photos','carreph','carre2ph','25','0','-25','25')">
    <div id="carre2ph" class="carre2" />
</div>

<span>
    Nos Photos
</span>

@*@{
    string p_unit;
    if (!sw_limit)
    {
        p_unit = $"{phsw}px";
    }
    else
    {
        p_unit = $"{phm}%";
    }
}*@

<div>
    <div id="contPhAloneJs" draggable="false" style="--phpc:@phpc; --phpx:@phpx; --qte_ph:@qtph"
         @ontouchstart="(s)=>OnTouchDown(s)" @ontouchmove="(s)=>OnTouchMove(s)" @ontouchend="OnTouchUp"
         @onmousedown="(s)=>OnDown(s)" @onmousemove="(s)=>OnMove(s)" @onmouseup="OnUp" @onmouseout="OnUp">
        @for (int i = 0; i < qtph; i++)
        {
            string s = $"photo/maison{i}.jpg";
            string l = $"photo/legend/legend{i}.html";
            <div class="contPhMultJs">
                <img draggable="false" src="@s" />
                <div class="contIfraJs">
                    <iframe src="@l" />
                </div>
            </div>
        }
    </div>
</div>

@{
    string t1 = $"{trb}%";
    string t2 = $"{trn}%";
}
<div style="--triremplnext:@t1;--triremplback:@t2">

    <svg @onclick="OnBack"
         data-src="/svg/tri.svg"
         id="mytriback"
         data-js="enabled"
         data-unique-ids="disabled"></svg>

    <svg @onclick="OnNext"
         data-src="/svg/tri.svg"
         id="mytrinext"
         data-js="enabled"
         data-unique-ids="disabled"></svg>
</div>

@code {

    int srcJpg = 0;
    int qtph = 0;
    async Task QtePh()
    {
        qtph = await Http.GetFromJsonAsync<int>("api/commande/GetQtePh");
        c.WriteLine("PHOTO QTEPH: ");
        c.WriteLine(qtph);
    }

    protected override async Task OnInitializedAsync()
    {
        await QtePh();

    }

    double prim_x;

    void OnDown(MouseEventArgs e) => prim_x = e.ScreenX;

    void OnTouchDown(TouchEventArgs e) => prim_x = e.Touches.First().ScreenX;

    void OnUp() => phpx = 0;

    void OnTouchUp(TouchEventArgs e) => phpx = 0;

    double new_x;
    double diff;
    double phpc;
    double phpx;
    bool sw_pass;

    void OnMove(MouseEventArgs e)
    {
        if (e.Buttons == 1)
        {
            if (!sw_pass)
            {
                new_x = e.ScreenX;
                diff = new_x - prim_x;
                phpx += diff;
                prim_x = new_x;
            }
            if (phpx > 150)
            {
                sw_pass = true;
                _ = OnBack();
            }
            else if (phpx < -150)
            {
                sw_pass = true;
                _ = OnNext();
            }
        }
    }

    void OnTouchMove(TouchEventArgs e)
    {
        if (!sw_pass)
        {
            new_x = e.Touches.First().ScreenX;
            diff = new_x - prim_x;
            phpx += diff;
            prim_x = new_x;
        }
        if (phpx > 50)
        {
            sw_pass = true;
            _ = OnBack();
        }
        else if (phpx < -50)
        {
            sw_pass = true;
            _ = OnNext();
        }
    }



    int trb = 0;
    int trn = 0;
    int phm = 0;
    async Task OnNext()
    {
        if (srcJpg < qtph - 1)
        {
            srcJpg++;
            trn += (100 / qtph);
            phpc -= (100 / qtph);
            phpx = 0;
        }
        await Task.Delay(300);
        sw_pass = false;
    }

    async Task OnBack()
    {
        if (srcJpg > 0)
        {
            srcJpg--;
            trn -= (100 / qtph);
            phpc += (100 / qtph);
            phpx = 0;
        }
        await Task.Delay(300);
        sw_pass = false;
    }
}
