@using System.IO
@using System.Net.Http
@using System.Threading
@inject HttpClient Http
@inject IJSRuntime js;

<div tabindex="1" id="carreph" class="carre" onclick="scaler()">
    <div id="carre2ph" class="carre2" />

</div>

<span>
    Nos Photos   
</span>

<div>
    <div id="contPhAloneJs" draggable="false" style="--phpc:@sphpc; --phpx:@phpx; --qte_ph:@qtph"
         @ontouchstart="(s)=> OnTouchDown(s)" @ontouchmove="(s)=>  OnTouchMove(s)" @ontouchend="OnTouchUp"
         @onmousedown="(s)=> OnDown(s)" @onmousemove="(s)=> OnMove(s)" @onmouseup="OnUp" @onmouseout="OnUp"> 

        @for (int i = 0; i < qtph; i++)
        {
            string s = $"photo/maison{i}.jpg";
            string l = $"photo/legend/legend{i}.html";
            <div class="contPhMultJs">
                <img draggable="false" src="@s" @onload="()=>AutoDefil(ctSource.Token)" />
                <div class="contIfraJs">
                    <iframe src="@l" />

                </div>
            </div>
        }
    </div>
</div>

@{
    string t1 = $"{trb}%";
    string t2 = $"{trn}%";
}

<div style="--triremplnext:@t1;--triremplback:@t2">

    <svg @onclick="()=>{ ctSource.Cancel(); _ = OnBack();}"
         data-src="/svg/tri.svg"
         id="mytriback"
         data-js="enabled"
         data-unique-ids="disabled">
    </svg>

    <svg @onclick="()=>{ ctSource.Cancel(); _ = OnNext();}"
         data-src="/svg/tri.svg"
         id="mytrinext"
         data-js="enabled"
         data-unique-ids="disabled">
    </svg>

</div>

@code {
    int srcJpg = 0;
    int qtph = 0;

    async Task QtePh()   {qtph = await Http.GetFromJsonAsync<int>("api/commande/GetQtePh"); c.WriteLine("qte: " + qtph); }

    protected override async Task OnInitializedAsync() => await QtePh();

    int compteurChargement;
    bool whileControl;       
    CancellationTokenSource ctSource = new();
    async Task AutoDefil(CancellationToken ct) 
    {   
        compteurChargement++;
        if (compteurChargement >= qtph)
        {
            await Task.Delay(1000);
            while (!whileControl)
            {
                for (int i = 0; i < qtph - 1; i++)
                {
                    if (ct.IsCancellationRequested) { whileControl = true; break; }                                       
                    await OnNext(); StateHasChanged(); 
                    await Task.Delay(3000); 
                }

                for (int i = 0; i < qtph -1 ; i++)
                {
                    if (ct.IsCancellationRequested) { whileControl = true; break; }                   
                    await OnBack(); StateHasChanged();
                    await Task.Delay(3000);
                }
            }
        }     
    }

    //protected override async Task OnAfterRenderAsync(bool fr)
    //{
      
    //}

    double prim_x;
    void OnDown(MouseEventArgs e) =>  prim_x = e.ScreenX;

    void OnTouchDown(TouchEventArgs e) =>  prim_x = Math.Round(e.Touches.First().ScreenX);

    void OnUp() =>  phpx = 0;

    void OnTouchUp(TouchEventArgs e) => phpx = 0;

    double new_x;
    double diff;
    double phpc;
    string? sphpc;
    double phpx;
    bool sw_pass;

    void OnMove(MouseEventArgs e)
    {
        if (e.Buttons == 1)
        {
            if (!sw_pass)
            {
                new_x = e.ScreenX;
                diff = new_x - prim_x;
                phpx += diff;
                prim_x = new_x;
            }
            if (phpx > 150)
            {
                ctSource.Cancel();
                sw_pass = true;
                _ = OnBack();
            }
            else if (phpx < -150)
            {
                ctSource.Cancel();
                sw_pass = true;
                _ = OnNext();
            }
        }
    }

    void OnTouchMove(TouchEventArgs e)
    {
        if (true)
        { 
            new_x = Math.Round(e.Touches.First().ScreenX);
            diff = new_x - prim_x;
            phpx += diff;
            prim_x = new_x;
        }

        if (phpx > 100)
        {
            ctSource.Cancel();
            sw_pass = true;
            _ = OnBack();
        }
        else if (phpx < -100)
        { 
            ctSource.Cancel();
            sw_pass = true;
            _ = OnNext();
        }
    }

    int trb = 100;
    int trn = 0;   

    async Task OnNext()
    {

        if (srcJpg < qtph - 1)
        {
            srcJpg++;
            trn += (100 / qtph);
            trb = 100 - trn ;
            var e = (100.0 / qtph);
            //   var de = e.ToString().Replace(",",".");

            //  var ef = Math.Round(e, 1);
            c.WriteLine("runey float next " + e + " ");// + Math.Round(e));
            phpc -= e;//Math.Round(e);
            sphpc = phpc.ToString().Replace(",", ".");
            //   phpc = Math.Round(phpc);
            phpx = 0;
        }
        await Task.Delay(300);
        sw_pass = false;
    }

    async Task OnBack()
    {
        if (srcJpg > 0)
        {
            srcJpg--;
            trn -= (100 / qtph);
            trb = 100 - trn;
            var e = (100.0 / qtph);
            c.WriteLine("rfloat back " + e + " ");// + Math.Round(e));
            phpc += e;// Math.Round(e);
            sphpc = phpc.ToString().Replace(",", ".");
            phpx = 0;
        }
        await Task.Delay(300);
        sw_pass = false;
    }
}
