@using System.IO
@using System.Net.Http
@using System.Threading
@inject HttpClient Http
@inject IJSRuntime js;
<div id="carreph" class="carre" onclick="scaler('photos','carreph','carre2ph','25','0','-25','25')">
    <div id="carre2ph" class="carre2" />
</div>

<span>
    Nos Photos
</span>

@{
    string p1 = $"{phm}%";
}
<div>
    <div id="contPhAloneJs" style="--phmove:@p1; --qte_ph:@qtph">
        @for (int i = 0; i < qtph; i++)
        {
            string s = $"photo/maison{i}.jpg";
            string l = $"photo/legend/legend{i}.html";
            <div class="contPhMultJs">
                <img src="@s" />
                <div class="contIfraJs">
                    <iframe src="@l" />
                </div>
            </div>
        }
    </div>
</div>

@{
    string t1 = $"{trb}%";
    string t2 = $"{trn}%";
}
<div style="--triremplnext:@t1;--triremplback:@t2">

    <svg @onclick="OnBack"
         data-src="/svg/tri.svg"
         id="mytriback"
         data-js="enabled"
         data-unique-ids="disabled"></svg>

    <svg @onclick="OnNext"
         data-src="/svg/tri.svg"
         id="mytrinext"
         data-js="enabled"
         data-unique-ids="disabled"></svg>
</div>

@code {

    int srcJpg = 0;
    int qtph = 0;
    // List<string> enumed;

    async Task QtePh()
    {
        qtph = await Http.GetFromJsonAsync<int>("api/commande/GetQtePh");
        c.WriteLine("PHOTO QTEPH: ");
        c.WriteLine(qtph);
    }

    protected override async Task OnInitializedAsync()
    {
        //  qtph = await Http.GetFromJsonAsync<int>("api/commande/GetQtePh");
        await QtePh();
        //Console.WriteLine("deb");
        //string path = "/";
        //var client = new HttpClient();
        //var jpgs = await client.GetStreamAsync(path);

        //var jpgFiles = Directory.GetFiles(path, "*.*");
        //if (jpgFiles.Count() > 0)
        //{
        //    Console.WriteLine("supzero");
        //}
        //else
        //{
        //    Console.WriteLine("else");
        //}
        //foreach (var fil in jpgFiles)
        //{
        //    Console.WriteLine(fil);
        //}
        //Console.WriteLine("fin");
        // var enume = jpgFiles.GetEnumerator()
        // enumed = jpgFiles.ToList();
        // srcJpg = enumed[0];
        // var srcJpgr = jpgFiles.GetEnumerator();
    }

    int trb = 0;
    int trn = 0;
    int phm = 0;

    void OnNext()
    {                                                                           //


        //foreach (string currentFile in jpgFiles)
        //{
        // currentFile.

        if (srcJpg < qtph - 1)
        {
            srcJpg++;
            trn = trn + (100 / qtph);
            phm = phm - (100 / qtph);
        }
        AppJs();
        //srcJpg = enumed[curser];
        // StateHasChanged();


        //   TriRempl();
    }

    void OnBack()
    {                                                                           //
        if (srcJpg > 0)
        {
            srcJpg--;
            trn = trn - (100 / qtph);
            phm = phm + (100 / qtph);
        }
        //srcJpg = enumed[curser];

        //  TriRempl();
        // AppJs();
    }

    void AppJs()
    {
        //   js.InvokeVoidAsync("res");
    }

    void TriRempl()                                                              // Remplissage Back Next.
    {
        //trn = 100 / 17 * maxNext + offset;
        //trnu = trn + "%";
        //trb = 100 - (100 / 17 * maxNext + offset);
        //trbu = trn + "%";
    }
}
