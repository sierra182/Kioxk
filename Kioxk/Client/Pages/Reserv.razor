@inject HttpClient Http
@inject IJSRuntime js
@using Kioxk.Shared.Models
@using System
@using System.Web
@using System.IO
@inject MySync mysync;
@{
    if (Selected is not null || maintien )  // ouvre
    {
        op = 0.9;
        pter = "none";
        trans = "100.5";
    }
    else if (mails! is null)
    {
        op = .9;
        pter = "initial";
        trans = "0";   // ferme
    }
}

<div id="form" style="--opres:@op; --pointres:@pter; --trans:@trans">
    <Form Com="@com" ComRapp="()=>CreateCommande()"></Form>

</div>

@if (mails! is not null)
{
    <div id="contscrollJs">

        @if (paie!.Value.ajoutmail is not null && pay)
        {
            <div id="contpaie">
                <div>
                    @((MarkupString)paie.Value.ajoutmail)
                </div>
            </div>
        }

        <div id="mailcont">
            <div>
                @((MarkupString)mails.Value.mybodymail!)
            </div>
            <div>
                <button style="background-color:@butcol; color:@butcoltxt" @onclick='ChangeOnClick' class="btn btn-success"> @but </button>

            </div>
        </div>
    </div>

    <div id="avert" style="display:@dispavert">
        Un e-mail de pré-réservation viens de vous être envoyé avec ce récapitulatif et la procédure à suivre pour finaliser la réservation, pensez à vérifiez vos courriers indésirables,
        en cas de non reception pensez à noter votre numéro de commande avant de fermer.
    </div>
}

@code {
    [Parameter]
    public HashSet<DateTime>? Selected { get; set; } 
    [Parameter]
    public EventCallback<HashSet<DateTime>> SelectedChanged { get; set; }
    [Parameter]
    public HashSet<DateTime>[]? Seasons { get; set; }
    [Parameter]
    public EventCallback<HashSet<DateTime>[]> SeasonsChanged { get; set; }
    [Parameter]
    public int[]? Prices { get; set; } 
    [Parameter]
    public EventCallback<int[]> PricesChanged { get; set; }

    string pter = "initial";
    double op = 0;
    string trans = "0";

    private Commande? com;
    private Kioxk.Shared.Mails.Mails? mails;
    private Kioxk.Shared.Mails.Paiement? paie;
    private int i;

    protected override void OnInitialized()
    {
        com = new Commande();
        js.InvokeVoidAsync("loadevent", "contscrollJs", "bas");
    }

    bool scrollHaut = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {       
        if (scrollHaut)
        {
            await js.InvokeVoidAsync("scroll", "contscrollJs", "haut");
            scrollHaut = false;
        }
    }

    string dispavert = "none";
    private bool pay;
    string butcoltxt = "";
    string butcol = "";
    string but = "Paiement";
    bool tog = false;

    private async Task ChangeOnClick()
    {
        if (!tog)
        {
            pay = true; scrollHaut = true;
            butcoltxt = "orange";
            butcol = "white";
            but = "Fermer";
            tog = true;
        }
        else
        {
            dispavert = "none";
            butcoltxt = "";
            butcol = "";
            but = "Paiement";
            scrollHaut = false;
            mails = null;
            paie = null;
            pay = false;
            tog = false;
            maintien = false;
            Selected = null;
            await SelectedChanged.InvokeAsync(Selected);
            mysync.RiseEvent();
            // Agenda.tsk.Start();
          //  var a = new Agenda();
          //  a.LaunchTask();
            //  ag.CallInit();

        }
    }

    private async Task CreateCommande()
    {
        if (Selected is not null && Seasons is not null && Prices is not null)
        {
            var sel = new HashSet<Datetime>();                                      // Convertis en entitée.
            foreach (var j in Selected)
            {
                sel.Add(new Datetime() { Dt = j });
            }

            var sea = new List<Hashset>();
            var f = 0;
            foreach (var s in Seasons)
            {
                sea.Add(new Hashset() { Hs = new HashSet<Datetime>() });
                foreach (var x in s)
                {
                    sea[f].Hs!.Add(new Datetime() { Dt = x });
                }
                f++;
            }

            var pri = new List<Int>();
            var indp = 0;
            foreach (var p in Prices)                                           // Evite le désordonnement de la liste dans la base.
            {
                pri.Add(new Int() { It = p, Index = indp });                    // enregistre l'ordre dans Index.
                indp++;
            }

            com!.Selected = sel;
            com.Seasons = sea;
            com.Prices = pri;
            com.Total = pri[0].It;




            //  var y = 
            var y = Send();


            c.WriteLine("avant wait");
            // var g = y.GetAwaiter();
            // g.OnCompleted(() => c.WriteLine("apres wait2"));
            c.WriteLine("apres wait");
        }
    }

    bool maintien;
    private async Task Send(){
        try
        {
            Agenda.cts.Cancel();
           
            c.WriteLine("send");
            var id = await Http.PostAsJsonAsync("api/commande/", com);
            c.WriteLine("send2");
            i = await id.Content.ReadFromJsonAsync<int>();         
            Console.WriteLine("Numero de commande: " + i);
            //  await js.InvokeVoidAsync("alert", "Réservation pré-validé");
            c.WriteLine("send3");
        }
        catch (Exception)
        {
            await js.InvokeVoidAsync("alert", "Echec de Connexion.!.");
        }
        finally
        {
            Selected = null;
         //   Agenda.tsk.Dispose();
            
            
           // Agenda.tsk.Dispose();
            //  maintien = true;
           // Agenda.zool = false;
          //  _ = SelectedChanged.InvokeAsync(Selected);
            mails = new(i, com.FirstName!, com.LastName!, com.Phone, com.Address!, com.Email!, com.RgtsCompl!, com.Selected, com.Total);
            paie = new();
            dispavert = "block";
            StateHasChanged();
            _ = js.InvokeVoidAsync("scroll", "contscrollJs", "bas");
        }
    }

}

