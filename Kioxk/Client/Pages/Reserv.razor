@inject HttpClient Http
@inject IJSRuntime js
@using Kioxk.Shared.Models
@using System
@using System.Web
@using System.IO


@{

    if (Selected.Any())  // ouvre
    {
        op = 0.9;
        pter = "none";
        trans = "100.5";
    }
    else if (mails! is null)
    {
        op = .9;
        pter = "initial";
        trans = "0";   // ferme
    }

}

<div id="form" style="--opres:@op; --pointres:@pter; --trans:@trans">
    <Form Com="@com" ComRapp="()=>CreateCommande()"></Form>       
</div>

@if (mails! is not null)
{
    <div id="contscrollJs">
        
        @if (paie!.Value.ajoutmail is not null && pay)
        {
            <div id="contpaie">
                <div>                    
                    @(
                        (MarkupString)paie.Value.ajoutmail
                        )
                </div>

            </div>
        }

        <div id="mailcont">
            <div>                
                @((MarkupString)mails.Value.mybodymail!)
            </div>
            <div>
                <button style="background-color:@butcol; color:@butcoltxt" @onclick='ChangeOnClick' class="btn btn-success"> @but </button>

            </div>

        </div>
             

    </div>

    <div id="avert" style="display:@dispavert">
        Un e-mail de pré-réservation viens de vous être envoyé avec ce récapitulatif et la procédure à suivre pour finaliser la réservation, pensez à vérifiez vos courriers indésirables,
        en cas de non reception pensez à noter votre numéro de commande avant de fermer.
    </div>
}


@code {

    [Parameter]
    public HashSet<DateTime> Selected { get; set; }
    [Parameter]
    public EventCallback<HashSet<DateTime>> SelectedChanged { get; set; }

    [Parameter]
    public HashSet<DateTime>[] Seasons { get; set; }
    [Parameter]
    public EventCallback<HashSet<DateTime>[]> SeasonsChanged { get; set; }

    [Parameter]
    public int[] Prices { get; set; }
    [Parameter]
    public EventCallback<int[]> PricesChanged { get; set; }



    string pter = "initial";
    double op = 0;
    string trans = "0";


    private Commande com;
    private Kioxk.Shared.Mails.Mails? mails;
    private Kioxk.Shared.Mails.Paiement? paie;
    private int i;

    protected override void OnInitialized()
    {
        com = new Commande();
        js.InvokeVoidAsync("loadevent", "contscrollJs", "bas");
    }

    bool scrollHaut = false;
    bool scrollBas = true;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("onafterrenderasync");
        if (scrollHaut)
        {
            await js.InvokeVoidAsync("scroll", "contscrollJs", "haut");
            scrollHaut = false;
        }


    }
    string dispavert = "none";
    private bool pay;
    string butcoltxt = "";
    string butcol = "";
    string but = "Paiement";
    bool tog = false;
    private void ChangeOnClick()
    {
        if (!tog)
        {

            pay = true; scrollHaut = true;
            butcoltxt = "orange";
            butcol = "white";
            but = "Fermer";            
            tog = true;

        }
        else
        {
            dispavert = "none";
            butcoltxt = "";
            butcol = "";
            but = "Paiement";
            scrollHaut = false;
            mails = null;
            paie = null;
            pay = false;
            tog = false;
        }
    }
    private void PayandScrollHaut()
    {
        pay = true; scrollHaut = true;
    }
    private void Quit()
    {
        pay = true; scrollHaut = true;
    }

    private async Task CreateCommande()
    {
        var sel = new HashSet<Datetime>();                                      // Convertis en entitée.
        foreach (var j in Selected)
        {
            sel.Add(new Datetime() { dt = j });
        }

        var sea = new List<Hashset>();
        var f = 0;
        foreach (var s in Seasons)
        {
            sea.Add(new Hashset() { Hs = new HashSet<Datetime>() });
            foreach (var x in s)
            {
                sea[f].Hs.Add(new Datetime() { dt = x });
            }
            f++;
        }

        var pri = new List<Int>();
        var indp = 0;
        foreach (var p in Prices)                                           // Evite le désordonnement de la liste dans la base.
        {
            pri.Add(new Int() { it = p, index = indp });                    // enregistre l'ordre dans index.
            indp++;
        }

        com.Selected = sel;
        com.Seasons = sea;
        com.Prices = pri;
        com.Total = pri[0].it;

        try
        {
            var id = await Http.PostAsJsonAsync("api/commande/", com);
            i = await id.Content.ReadFromJsonAsync<int>();
            Console.WriteLine("Numero de commande: " + i);
            await js.InvokeVoidAsync("alert", "Réservation validé");
        }
        catch (Exception)
        {
            await js.InvokeVoidAsync("alert", "Echec de Connexion.!.");
        }
        finally
        {
            Selected.Clear();
            // await SelectedChanged.InvokeAsync(Selected);
            mails = new(i, com.Ref, com.FirstName, com.LastName, com.Phone, com.Address, com.Email, com.RgtsCompl, com.Selected, com.Seasons, com.Prices, com.Total);
            paie = new();
            dispavert = "initial";
            StateHasChanged();
            _ = js.InvokeVoidAsync("scroll", "contscrollJs", "bas");
            Console.WriteLine("finaly clear!");
        }
    }
}

