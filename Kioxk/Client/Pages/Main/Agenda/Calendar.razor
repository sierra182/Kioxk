@inject MyEvents myEvents
@using System.Globalization

<div><div><span>@monthName</span><span>@year</span></div></div>

<div id="panneau">
    <div><span>lu</span></div>
    <div><span>ma</span></div>
    <div><span>me</span></div>
    <div><span>je</span></div>
    <div><span>ve</span></div>
    <div><span>sa</span></div>
    <div><span>di</span></div>

    @for (int i = 0; i < nbrElement; i++)
    {
        var t = datetime[i];
        var e = i;
        if
        (unselectable![i] is null or true)
        {
            role = "";
        }
        else if (unselectable![i] is not null and false && myEvents.Livret is not null)
        {
            role = "button";
        }
        <div role="@role" aria-label="select or not" @onclick="()=> {

            if(myEvents.Livret is not null || !livretFirstRender )
            {
               livretFirstRender = false;
               OnClick3DaysOnly(e, t);
            }}">

            <Element @bind-DateTime="@datetime[i]" @bind-UnSelectable="@unselectable![i]" @bind-Selected="@selected![i]" Seasons="@mySeason(e)"></Element>

        </div>
    }
</div>

@code {
    [Parameter]
    public DateTime DateTime { get; set; }
    [Parameter]
    public EventCallback<DateTime> DateTimeChanged { get; set; }
    [Parameter]
    public HashSet<DateTime>? UnSelectable { get; set; } = new();
    [Parameter]
    public EventCallback<HashSet<DateTime>> UnSelectableChanged { get; set; }

    private HashSet<DateTime>? sel;
    [Parameter]
    public HashSet<DateTime>? Selected
    {
        get { return sel; }
        set
        {
            if (value is not null)
                sel = new(value);
            else
                sel = null;
        }
    }
    [Parameter]
    public EventCallback<HashSet<DateTime>> SelectedChanged { get; set; }
    [Parameter]
    public HashSet<DateTime>[]? Seasons { get; set; }
    [Parameter]
    public EventCallback<HashSet<DateTime>[]> SeasonsChanged { get; set; }

    private string role = "";
    private bool livretFirstRender = true;
    private const int nbrElement = 42;
    private DateTime[] datetime = new DateTime[nbrElement];
    private bool?[]? unselectable;
    private bool?[]? selected;
    private string? monthName;
    private int year;
    private bool[,]? seasons;

    bool?[] mySeason(int it)
    {                                                                       // Passage d'une ligne d'un tableau multidimentionnel à tableau unidimentionnel.
        return new bool?[2] { seasons![it, 0], seasons[it, 1] };
    }

    private int month;
    private DateTime firstDay;
    private int firstDayWeek;
    private int monthDays;
    private DateTime monthDaysdt;

    private DateTime firstDayNextMonth;
    private int monthDaysNextMonth;
    private DateTime monthDaysNextMonthdt;

    private DateTime firstDayLastMonth;
    private int monthDaysLastMonth;
    private DateTime monthDaysLastMonthdt;
    private int monthCount;

    protected override async Task OnParametersSetAsync()
    {
        unselectable = new bool?[nbrElement];
        selected = new bool?[nbrElement];
        seasons = new bool[nbrElement, 2];
        datetime = new DateTime[nbrElement];

        monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(DateTime.Month);
        year = DateTime.Year;
        month = DateTime.Month;
        monthDays = DateTime.DaysInMonth(year, month);
        monthDaysdt = new DateTime(year, month, monthDays);
        firstDay = new DateTime(year, month, 1);
        firstDayWeek = (Int32)firstDay.DayOfWeek;

        if (month is 12)
        { monthCount = 1; }
        else { monthCount = month + 1; }

        firstDayNextMonth = new DateTime(year, monthCount, 1);
        monthDaysNextMonth = DateTime.DaysInMonth(year, monthCount);

        if (month is 1)
        { monthCount = 12; }
        else { monthCount = month - 1; }

        firstDayLastMonth = new DateTime(year, monthCount, 1);
        monthDaysLastMonth = DateTime.DaysInMonth(year, monthCount);
        monthDaysLastMonthdt = new DateTime(year, monthCount, monthDaysLastMonth);

        await associerTableau();
    }

    async Task associerTableau()
    {
        int offSet;                                                        // Réglage du offset selon le jour de la semaine du premier jour du mois.
        if (firstDayWeek == 0)
        {
            offSet = 6;
        }
        else
        {
            offSet = firstDayWeek - 1;
        }

        for (int i = offSet, a = 0; i < monthDays + offSet; i++, a++)
        {                                                                  // Remplit les jours du mois apres le offset.
            datetime[i] = firstDay.AddDays(a);                             // Les rends selectionnables.
            unselectable![i] = false;

        }
        for (int i = offSet; i < monthDays + offSet; i++)
        {
            if (UnSelectable!.Contains(datetime[i]))
            {
                unselectable![i] = true;                                    // Rend non-selectionnables les jours donnés.
            }

            if (i > 0 && i < datetime.Length)
            {
                if ((UnSelectable!.Contains(datetime[i + 1]) || UnSelectable!.Contains(datetime[i - 1])) && !UnSelectable!.Contains(datetime[i]))
                {
                    unselectable![i] = true;
                }
            }

            if (datetime[i] == firstDay)
            {
                if (UnSelectable.Contains(monthDaysLastMonthdt))
                {
                    unselectable![i] = true;
                }
            }
            else if (datetime[i] == monthDaysdt)
            {
                if (UnSelectable.Contains(firstDayNextMonth))
                {
                    unselectable![i] = true;
                }
            }

            if (Selected is not null && Selected.Contains(datetime[i]))
            {
                selected![i] = true;                                        // Rend selectionnés les jours donnés.
            }

            if (Seasons![0].Contains(datetime[i]))                                  // Rend moyens les jours donnés.
            {
                seasons![i, 0] = true;
            }

            if (Seasons[1].Contains(datetime[i]))                                  // Rend hauts les jours donnés.
            {
                seasons![i, 1] = true;
            }
        }
    }
    //void OnClickWeekOnly(int i, DateTime t)
    //{                                                               // Selection minimale hebdomadaire avec
    //    r = true;                                                   // Rend les elements vides clickable par le programme.
    //    if (unselectable![i] is null or true)                                // Rend les elements vides non clickable par l'utilisateur.
    //        return;

    //    DateTime nt = t;
    //    int j = (Int32)t.DayOfWeek;
    //    int ni = i;
    //    while (j != 1)
    //    {                                                           // Rembobine au premier jour de la semaine.
    //        nt = nt.AddDays(-1);
    //        j = (Int32)nt.DayOfWeek;
    //        ni--;
    //    }

    //    for (int f = 0; f < 7; f++)
    //    {                                                           // Appelle OnClick pour les septs jours suivants.
    //        OnClick(ni, nt);
    //        ni++;
    //        nt = nt.AddDays(1);
    //    }
    //}

    void OnClick3DaysOnly(int ni, DateTime nt)
    {                                                               // Selection minimale hebdomadaire avec
        r = true;                                                   // Rend les elements vides et unselectable clickable par le programme.
        if (unselectable![ni] is null or true)                                // Rend les elements vides non clickable par l'utilisateur.
            return;

        var ntd = nt;
        var ntg = nt;
        int minimalsCount = 0;                                          // Si le jour actuel fais partie d'un emsemble d'au moins trois.
        int minimalsCountRight = 0;                                     // Si le jour actuel fais partie d'un emsemble d'au moins trois sur la droite
        int minimalsCountLeft = 0;                                       // Si le jour actuel fais partie d'un emsemble d'au moins trois sur la gauche

        for (int i = 1; i < 4; i++)
        {
            if (Selected is not null && Selected.Contains(ntd.AddDays(i)))       // compte les jour selectionnés vers la droite
            {
                minimalsCount++;
                minimalsCountRight++;
            }
            else break;
        }
        for (int i = 1; i < 4; i++)
        {
            if (Selected is not null && Selected.Contains(ntg.AddDays(-i)))   // compte les jour selectionnés vers la gauche et les y ajoute
            {
                minimalsCount++;
                minimalsCountLeft++;
            }
            else break;
        }
            
        if ((Selected is null || (Selected is not null && !Selected.Contains(nt))) && minimalsCount < 1)   // si element en cours non selectionné et que: ni à g, ni à d, il n'y a plus de 3 elements selectionné
        {
            var nio = ni;
            var nto = nt;                         

            for (int f = 0; f < 3; f++)
            {                                                           // Appelle OnClick pour les trois jours suivants.             
                OnClick(nio, nto);
                nto = nto.AddDays(1);
                nio++;

                if ( unselectable[nio] is true )                           // Préviens les rebords contre unselectable: reviens trois jour avant rebord
                {  
                    for (int i = 0; i < 3; i++)
                    {                    
                        nto = nto.AddDays(-1);
                        nio--;
                        if(unselectable[nio] is true)                       // Si le retour rencontre un unselectable, stop.
                        {
                            //while(true)                                                   // A mettre pour eviter que 1 ou 2 jours soit selectionnées entre deux preiodes.
                            //{
                            //    nto = nto.AddDays(1);
                            //    nio++;
                            //    if (unselectable[nio] is true)   Annonce 3 jour min a rajouter
                            //        break;
                            //    if (Selected is not null && Selected.Contains(nto))
                            //    {
                            //        OnClick(nio, nto);
                            //    }
                            //}
                            break;
                        }

                        if (Selected is not null && !Selected.Contains(nto))         // Si le retour rencontre un non-selected, le selectionne
                        {
                            OnClick(nio, nto);
                        }                       
                    }
                    break;
                }

                else if (Selected is not null && Selected.Contains(nto))                           // Préviens les rebords contre Selected: reviens au jour cliqué
                {    
                    for (int i = 0; i < 2; i++)
                    {                        
                        nto = nto.AddDays(-1);
                        nio--;
                        if (nto == nt)
                            break;

                        if (Selected is not null && !Selected.Contains(nto))
                        {
                            OnClick(nio, nto);
                        }                      
                    }
                    break;
                }
            }
        }

        else 
        {             
            if (Selected is not null && Selected.Contains(nt) && minimalsCountRight < 3)   // si element en cours selectionnéet et que à droite il n'y a pas suffisament d'element selectionné.
            {               
                var ntdd = nt;
                var nid = ni;                                

                for (int i = 1; i < 4; i++)
                {   
                    ntdd = ntdd.AddDays(1);                                 // supprime les elements selectionnées, jusqu'a un qui ne l'est pas, vers la droite.
                    nid++;

                    if ( Selected is null || Selected is not null && !Selected.Contains(ntdd))
                        break;
                                        
                    OnClick(nid, ntdd);
                }

            }

            if (Selected is not null && Selected.Contains(nt) && minimalsCountLeft < 3)   // si element en cours selectionnéet et que à gauche, il n'y a pas suffisament d'element selectionné
            {    
                var ntgg = nt;
                var nig = ni;

                for (int i = 1; i < 4; i++)
                {    
                    ntgg = ntgg.AddDays(-1);                                 // supprime les elements selectionnées, jusqu'a un qui ne l'est pas, vers la gauche.
                    nig--;
                    if ( Selected is null || Selected is not null && !Selected.Contains(ntgg))
                         break;
                         
                    OnClick(nig, ntgg);
                }
            }
            OnClick(ni, nt);
        } 
    }

    bool r = false;
    private void OnClick(int i, DateTime t)
    {
        if (!r)
        {
            if (unselectable![i] == null)                            // Rend les éléments vides non clickable sans OnClickWeekOnly
                return;
        }

        if (Selected is not null && Selected.Contains(t))
        {
            Selected.Remove(t);                                    // Supprime la selection si elle existe.
            if (Selected.Count is 0)               // Si le panier est vide supprime le panier.
                Selected = null;
        }

        else if (!UnSelectable!.Contains(t))
        {
            if (Selected is null)
                Selected = new();                                         // Sinon ajoute le selection si elle n'est pas dans Unselectable

            Selected.Add(t);
        }

        SelectedChanged.InvokeAsync(Selected);
    }
}
