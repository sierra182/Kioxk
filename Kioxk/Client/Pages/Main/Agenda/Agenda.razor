@inject IJSRuntime js
@inject HttpClient Http
@inject MyEvents myevents
@inject Sync mySync;
@using Kioxk.Shared.Models
@using Kioxk.Client.Shared
@using Kioxk.Client.Services

<div id="ag_cont">

    <div id="calendar">
        <Calendar @bind-DateTime="@DateTime" @bind-UnSelectable="@UnSelectable" @bind-Selected="@Selected" @bind-Seasons="@Seasons" />
    </div>

    @{
        if (periodes.Count > 0)
        {
            mycallbool = true;
            classe = "mycallplein";
        }
        else if (mycallbool)
            classe = "";

    }

    <div tabindex="0" style="--triremplnext:@trnu;--triremplback:@trbu">
        <svg @onclick="OnBack"
             data-src="items/tri.svg"
             role="button"
             aria-label="affiche le mois précédent"
             id="mytriback"
             data-js="enabled"
             data-unique-ids="disabled"
             style="visibility:@visBack">
        </svg>

        <svg @onclick="OnNext"
             data-src="items/tri.svg"
             role="button"
             aria-label="affiche le mois suivant"
             id="mytrinext"
             data-js="enabled"
             data-unique-ids="disabled"
             style="visibility: @visNext">
        </svg>

        <div title="supprime toutes les périodes selectionnées">
            <svg @onclick="OnClearAll"
                 class="@classe"
                 data-src="items/call.svg"
                 role="button"
                 aria-label="supprime toutes les périodes selectionnées"
                 id="mycall"
                 data-js="enabled"
                 data-unique-ids="disabled">
            </svg>

        </div>
    </div>

    <div id="periodes">
        <Periodes @bind-Selected="@Selected" @bind-Seasons="@Seasons" @bind-Prices="@Prices" @bind-periodes="@periodes" />
    </div>

</div>

@code {
    private HashSet<DateTime>? sel;
    [Parameter]
    public HashSet<DateTime>? Selected
    {
        get { return sel; }
        set
        {
            if (sel is not null && value is not null)
            {
                if (!sel.SetEquals(value))
                {
                    sel = new(value);
                    SelectedChanged.InvokeAsync(Selected);
                }
            }
            else
            {
                if (sel is not null && value is null)
                {
                    sel = null;
                    SelectedChanged.InvokeAsync(Selected);
                }
                else if (sel is null && value is not null)
                {
                    sel = new(value);
                    SelectedChanged.InvokeAsync(Selected);
                }
            }
        }
    }

    [Parameter]
    public EventCallback<HashSet<DateTime>> SelectedChanged { get; set; }
    [Parameter]
    public HashSet<DateTime>[]? Seasons { get; set; }
    [Parameter]
    public EventCallback<HashSet<DateTime>[]> SeasonsChanged { get; set; }
    [Parameter]
    public int[]? Prices { get; set; }
    [Parameter]
    public EventCallback<int[]> PricesChanged { get; set; }

    private List<List<DateTime>> periodes { get; set; } = new();
    private DateTime DateTime { get; set; } = DateTime.Now;
    private HashSet<DateTime> UnSelectable { get; set; } = new();

    private int trn;
    private string trnu = "0%";
    private int trb;
    private string trbu = "0%";

    private string classe = "";
    private bool mycallbool = false;

    private string visBack = "Hidden";
    private string visNext = "Visible";
    private DateTime now = DateTime.Now;

    private async Task Sync()
    {
        HashSet<DateTime>[] exSeasons = { new(), new() };
        List<int> exPrices = new() { 0, 0, 0, 0 };
        Livret? livret = null;

        if (Seasons is not null)
            exSeasons = new HashSet<DateTime>[] { new(Seasons[0]), new(Seasons[1]) };

        if (Prices is not null)
            exPrices = Prices.ToList();
        try
        {
            var ivret = await Http.GetAsync("api/commande");
            if (ivret.StatusCode is System.Net.HttpStatusCode.NoContent)
            {
                c.WriteLine("NO CONTENT");
                livret = null;
            }
            if (ivret.StatusCode is System.Net.HttpStatusCode.OK)
            {
                livret = await ivret.Content.ReadFromJsonAsync<Livret>();
                myevents.Livret = livret;

                myevents.HelpUpdate?.Invoke();
            }
        }

        catch (Exception ex) { c.WriteLine(ex); }

        if (livret is not null)
        {
            installLivret(livret);
            afterSync(exSeasons, exPrices);
            StateHasChanged();
        }
    }

    void installLivret(Livret livret)
    {
        UnSelectable = new();                                                            // Convertis les entitées en Objet.

        if (livret.UnSelectable is not null)
            foreach (var dt in livret.UnSelectable)                                                  // Installe Unselectable.
                UnSelectable.Add(dt.Dt);

        for (int prevDay = now.Day; prevDay >= 1; prevDay--)                                      // Rend non-selectable les jours précédents le jour actuel.
        {
            UnSelectable.Add(new DateTime(now.Year, now.Month, prevDay));
        }
        CompleteWeek();

        Seasons![1] = new();
        Seasons[0] = new();
        var i = 0;

        if (livret.Seasons is not null)
        {
            foreach (var Hs in livret.Seasons)                                              // Installe les saisons.
            {
                foreach (var dt in Hs.Hs!)
                    Seasons[i].Add(dt.Dt);

                i++;
            }
            foreach (var f in Seasons[1].ToList())                                          // Rend les moyennes et hautes saisons annuelles.
            {
                Seasons[1].Add(new DateTime(now.Year, f.Month, f.Day));
                Seasons[1].Add(new DateTime(now.Year + 1, f.Month, f.Day));
                Seasons[1].Remove(f);
            }

            foreach (var f in Seasons[0].ToList())
            {
                Seasons[0].Add(new DateTime(now.Year, f.Month, f.Day));
                Seasons[0].Add(new DateTime(now.Year + 1, f.Month, f.Day));
                Seasons[0].Remove(f);
            }
        }
        var j = 1;

        foreach (var it in livret.Prices!)                                              // Installe les prix.
        {
            Prices![j] = it.It;
            j++;
        }
    }

    int j;
    DateTime ntime;
    void CompleteWeek()
    {                                                                           // Rend non-selectable les derniers jours de la semaine actuelle.
        j = (Int32)now.DayOfWeek;
        ntime = now.Date;
        while (j != 0)
        {
            ntime = ntime.AddDays(1);
            UnSelectable.Add(ntime);
            j = (Int32)ntime.DayOfWeek;
        }
    }

    HashSet<DateTime>? intersec;
    HashSet<DateTime>? unionExSais;
    HashSet<DateTime>? unionSais;
    HashSet<DateTime>? intersecExSais;
    HashSet<DateTime>? intersecSais;

    private void afterSync(HashSet<DateTime>[] seas, List<int> pric)
    {
        if (Selected is not null)
        {
            bool message = false;

            intersec = new HashSet<DateTime>(Selected);
            intersec.IntersectWith(UnSelectable);
            if (intersec.Count > 0)                                     // Si au moins un jour des périodes selectionnées n'est plus dispo, supprime la période.
            {
                foreach (DateTime i in intersec)
                {
                    c.WriteLine("message numero1: " + i);
                    message = true;
                    suppressionPeriodes(i);
                }
            }

            foreach (var sel in Selected)
                if (UnSelectable.Contains(sel.AddDays(1)) || UnSelectable.Contains(sel.AddDays(-1)))        // Prend en compte les jours tampons.
                {
                    c.WriteLine("message numero2: " + sel);
                    message = true;
                    suppressionPeriodes(sel);
                }

            if (message)
                js.InvokeVoidAsync("alert", "Attention certains jours que vous aviez selectionnés ne sont plus disponibles, la période a été supprimeé de votre selection. Veuillez re-vérifier vos dates svp.");

            unionExSais = new HashSet<DateTime>(seas[0]);         //  Réunis les anciennes saisons dans le meme HashSet
            unionExSais.UnionWith(seas[1]);

            unionSais = new HashSet<DateTime>(Seasons![0]);        //  Réunis les nouvelles saisons dans le meme HashSet
            unionSais.UnionWith(Seasons[1]);

            intersecExSais = new HashSet<DateTime>(Selected);     // Calcule si parmis les anciennes saisons, une date correspond à la selection.
            intersecExSais.IntersectWith(unionExSais);
            intersecSais = new HashSet<DateTime>(Selected);       // Calcule si parmis les nouvelles saisons, une date correspond à la selection.
            intersecSais.IntersectWith(unionSais);

            // Si les anciennes saisons ne correspondent plus aux nouvelles et qu'une selection fait partie des anciennes ou nouvelles saisons.
            //if ((!seas[0].SetEquals(Seasons[0]) || !seas[1].SetEquals(Seasons[1])) && (intersecExSais.Count > 0 || intersecSais.Count > 0))
            //{
            //    js.InvokeVoidAsync("alert", "Attention la synchronisation indique que les dates des saisons ont été modifiées depuis le serveur, à l'instant. Veuillez vérifier votre commande.");
            //}

            pric.Remove(pric.ElementAt(0));             // Enlève le prix total aux anciens prix.
            var npric = Prices!.ToList();                // Crée une nouvelle liste des prix udpdated.
            npric.Remove(npric.ElementAt(0));           // Y enlève le prix Total

            //if (!pric.SequenceEqual(npric))  // Si les prix ont changés et qu'il y a au moins une selection.
            //{
            //    js.InvokeVoidAsync("alert", "Attention la synchronisation indique que les prix ont potentiellement été modifiés. Veuillez re-vérifier votre commande.");
            //}
        }
    }

    private void suppressionPeriodes(DateTime i)
    {
        Selected!.Remove(i);
        int eclDroit = 1;
        while (Selected.Contains(i.AddDays(eclDroit)))
        {
            Selected.Remove(i.AddDays(eclDroit));
            eclDroit++;
        }
        int eclGauche = -1;
        while (Selected.Contains(i.AddDays(eclGauche)))
        {
            Selected.Remove(i.AddDays(eclGauche));
            eclGauche--;
        }
    }

    protected override void OnInitialized()
    {
        myevents.AddSubscriptionSync += () => AddSubscriptionSync();
        myevents.RemoveSubscriptionSync += () => RemoveSubscriptionSync();
        AddSubscriptionSync();
    }

    public void AddSubscriptionSync() =>
        Services.Sync.MyEvent += syncEventHandler;

    public void RemoveSubscriptionSync() =>
        Services.Sync.MyEvent -= syncEventHandler;

    private async void syncEventHandler() => await Sync();

    const int maxMonth = 12;
    int maxNext;
    void OnNext()
    {                                                                           // Limite à maintenant jusqu'aux douze prochains mois: Aller
        visBack = "Visible";
        if (maxNext < maxMonth)
        {
            DateTime = DateTime.AddMonths(1);
            maxNext++;

            if (maxNext == maxMonth)
                visNext = "Hidden";

            TriRempl();
        }
    }

    int offset = 20;
    void OnBack()
    {                                                                           // Limite à maintenant jusqu'aux douze prochains mois: Retour
        visNext = "Visible";

        if (maxNext > 0)
        {
            DateTime = DateTime.AddMonths(-1);
            maxNext--;

            if (maxNext == 0)
                visBack = "Hidden";

            TriRempl();
        }
    }

    void TriRempl()                                                              // Remplissage Back Next.
    {
        trn = 100 / 17 * maxNext + offset;
        trnu = trn + "%";
        trb = 100 - (100 / 17 * maxNext + offset);///!!! var
        trbu = trn + "%";
    }

    void OnClearAll() => Selected = null;

}