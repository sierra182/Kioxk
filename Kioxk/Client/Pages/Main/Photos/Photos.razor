@using System.IO
@using System.Net.Http
@using System.Threading
@using Kioxk.Client.Pages.Main.Photos
@inject HttpClient Http
@inject IJSRuntime js
@inject Services.AutoDefil myAutoDefil

<div tabindex="0" id="carreph" class="carre" @onclick='()=>{DisposeAutoDefil(); js.InvokeVoidAsync("scaler");}' role="button" aria-label="agrandir les images">
    <div id="carre2ph" class="carre2" />

</div>

<span>
    Nos Photos
</span>

<div>
    <div id="contPhAloneJs" draggable="false" style="--phpc:@sphpc; --phpx:@phpx; --qte_ph:@qtph"
         @ontouchstart="(s)=> OnTouchDown(s)" @ontouchmove="(s)=>  OnTouchMove(s)" @ontouchend="OnTouchUp"
         @onmousedown="(s)=> OnDown(s)" @onmousemove="(s)=> OnMove(s)" @onmouseup="OnUp" @onmouseout="OnUp">

        @{
            const string sizes = "min(calc(100vw * .855),30rem)";
        }
        @for (int i = 0; i < qtph; i++)
        {
            string s = $"photos/maison{i}.jpg";

            <div class="contPhMultJs">

                <picture class="myPicture">
                    <source sizes="@sizes" srcset="@($"photos/maison{i}/maison{i}_resized_250.webp") 250w, @($"photos/maison{i}/maison{i}_resized_500.webp") 500w, @($"photos/maison{i}/maison{i}_resized_1000.webp") 1000w, @($"photos/maison{i}/maison{i}_resized_2000.webp") 2000w" type="image/webp">
                    <source sizes="@sizes" srcset="@($"photos/maison{i}/maison{i}_resized_250.jpg") 250w, @($"photos/maison{i}/maison{i}_resized_500.jpg") 500w, @($"photos/maison{i}/maison{i}_resized_1000.jpg") 1000w, @($"photos/maison{i}/maison{i}_resized_2000.jpg") 2000w" type="image/jpeg">
                    <img loading="lazy" width="0" height="0" draggable="false" src="@s" @onload="()=> WaitForPhotosLoaded()" alt="image illustrant la maison" />
                </picture>

                <div class="contIfraJs">
                    <div>
                        <div>
                            @legendManager.GetLegend(i)
                        </div>
                    </div>
                </div>

            </div>
        }

    </div>
</div>

@{
    string t1 = $"{trb}%";
    string t2 = $"{trn}%";
}

<nav style="--triremplnext:@t1;--triremplback:@t2">

    <svg @onclick="()=>{ myAutoDefil.Dispose(); _ = OnBack();}"
         role="button"
         arial-label="affiche la photo précédente"
         data-src="items/tri.svg"
         id="mytriback"
         data-js="enabled"
         data-unique-ids="disabled">
    </svg>

    <svg @onclick="()=>{ myAutoDefil.Dispose(); _ = OnNext();}"
         role="button"
         arial-label="affiche la photo suivante"
         data-src="items/tri.svg"
         id="mytrinext"
         data-js="enabled"
         data-unique-ids="disabled">
    </svg>

</nav>

@code {
    private LegendManager legendManager = new LegendManager();
    int srcJpg = 0;
    int qtph = 0;
    async Task QtePh() { qtph = await Http.GetFromJsonAsync<int>("api/commande/GetQtePh"); }

    protected override async Task OnInitializedAsync() => await QtePh();

    int compteurChargement;
    async Task WaitForPhotosLoaded()
    {
        await Task.Delay(1000);
        compteurChargement++;
        if (compteurChargement >= qtph)
            Services.AutoDefil.MyAutoDefilEvent += autoDefilEventHandler;
    }

    void DisposeAutoDefil()
    {
        Services.AutoDefil.MyAutoDefilEvent -= autoDefilEventHandler;
        myAutoDefil.Dispose();
    }

    private async void autoDefilEventHandler() => await AutoDefil();

    bool reverse = false;
    async Task AutoDefil()
    {    
    a:
        if (srcJpg < qtph - 1 && !reverse)
        {
            await OnNext();
            StateHasChanged();
        }
        else
            reverse = true;

        if (srcJpg > 0 && reverse)
        {
            await OnBack();
            StateHasChanged();
        }
        else if (srcJpg == 0)
        {
            reverse = false;
            goto a;
        }
        else
            reverse = false;
    }

    double prim_x;
    void OnDown(MouseEventArgs e) => prim_x = e.ScreenX;

    void OnTouchDown(TouchEventArgs e) => prim_x = Math.Round(e.Touches.First().ScreenX);

    void OnUp() => phpx = 0;

    void OnTouchUp(TouchEventArgs e) => phpx = 0;

    double new_x;
    double diff;
    double phpc;
    string? sphpc;
    double phpx;
    bool sw_pass;

    void OnMove(MouseEventArgs e)
    {
        if (e.Buttons == 1)
        {
            if (!sw_pass)
            {
                new_x = e.ScreenX;
                diff = new_x - prim_x;
                phpx += diff;
                prim_x = new_x;
            }
            if (phpx > 150)
            {
                DisposeAutoDefil();
                sw_pass = true;
                _ = OnBack();
            }
            else if (phpx < -150)
            {
                DisposeAutoDefil();
                sw_pass = true;
                _ = OnNext();
            }
        }
    }

    void OnTouchMove(TouchEventArgs e)
    {
        if (true)
        {
            new_x = Math.Round(e.Touches.First().ScreenX);
            diff = new_x - prim_x;
            phpx += diff;
            prim_x = new_x;
        }

        if (phpx > 100)
        {
            DisposeAutoDefil();
            sw_pass = true;
            _ = OnBack();
        }
        else if (phpx < -100)
        {
            DisposeAutoDefil();
            sw_pass = true;
            _ = OnNext();
        }
    }

    int trb = 100;
    int trn = 0;

    async Task OnNext()
    {
        if (srcJpg < qtph - 1)
        {
            srcJpg++;
            trn += (100 / qtph);
            trb = 100 - trn;
            var e = (100.0 / qtph);
            phpc -= e;
            sphpc = phpc.ToString().Replace(",", ".");
            phpx = 0;
        }
        await Task.Delay(300);
        sw_pass = false;
    }

    async Task OnBack()
    {
        if (srcJpg > 0)
        {
            srcJpg--;
            trn -= (100 / qtph);
            trb = 100 - trn;
            var e = (100.0 / qtph);
            phpc += e;
            sphpc = phpc.ToString().Replace(",", ".");
            phpx = 0;
        }
        await Task.Delay(300);
        sw_pass = false;
    }
}
