@inject HttpClient Http
@inject IJSRuntime js
@inject MyEvents myevents

@using Kioxk.Shared.Models
@using System
@using System.Web
@using System.IO
@using Kioxk.Client.Pages.Main.Agenda

@{
    if (Selected is not null)  // ouvre
    {      
        op = 0.9;
        pter = "none";
        trans = "100.5";
        visib = "hidden";
    }
    else if (mails! is null)
    {
        op = .9;
        pter = "initial";
        trans = "0";   // ferme
        visib = "visible";
    }
}

<div id="couv" style="--visib:@visib" @onclick="(e)=>selectBefore(e)">
    <img width="0" height="0" alt="icone carnet réservation" src="items/res.webp" />
    <span style="opacity:@spanop"> &nbsp; Selectionnez dabord une date sur le calendrier :) &nbsp; </span>
</div>
<div id="pinterog" role="button" aria-label="affiche la politique de confidentialité" @onclick="pinterogToggle" style="transform:rotateY(@(pintdeg)deg); opacity:@pintop; pointer-events:@pint_pointer_event">
    <img  alt="icône point d'interrogation" width="0" height="0" src="items/interog.svg" />
</div>
<div id="donnees" style="opacity:@donop">
    <img alt="politique de condidentialité" width="0" height="0" src="items/donnees.svg" />
</div>
<div id="form" style="--opres:@op; --pointres:@pter; --trans:@trans; opacity:@formop; pointer-events:@form_pointer_event">
    <Form Com="@com" ComRapp="()=>CreateCommande()"></Form>

</div>


@if (mails is not null)
{
    form_pointer_event = "none";
    formop = 0;
    <div id="contscrollJs">

        @if (paie!.Value.ajoutmail is not null && pay)
        {           
            <div id="contpaie">
                <div>
                    @((MarkupString)paie.Value.ajoutmail)
                </div>
            </div>
        }

        <div id="mailcont">
            <div>
                @((MarkupString)mails.Value.mybodymail!)
            </div>
            <div>
                <button arial-label="navigation" style="background-color:@butcol; color:@butcoltxt" @onclick='ChangeOnClick' class="btn btn-success"> @but </button>

            </div>
        </div>
    </div>

    <div id="avert" style="display:@disp_but">
        <span>
            Un e-mail de pré-réservation viens de vous être envoyé avec ce récapitulatif et la procédure à suivre pour finaliser la réservation, pensez à vérifiez vos courriers indésirables,
            en cas de non reception pensez à noter votre numéro de commande avant de fermer.
        </span>

        <button arial-label="navigation" class="btn btn-succes" @onclick='()=>{disp_but = "none";}'> Ok </button>

    </div>
}

@code {
    private HashSet<DateTime>? sel;
    [Parameter]
    public HashSet<DateTime>? Selected { get{ return sel; } set { sel = value; if (sel is not null && !create) { pint_pointer_event = "initial"; } } }
    [Parameter]
    public EventCallback<HashSet<DateTime>> SelectedChanged { get; set; }
    [Parameter]
    public HashSet<DateTime>[]? Seasons { get; set; }
    [Parameter]
    public EventCallback<HashSet<DateTime>[]> SeasonsChanged { get; set; }
    [Parameter]
    public int[]? Prices { get; set; }
    [Parameter]
    public EventCallback<int[]> PricesChanged { get; set; }

    string pter = "initial";
    double op = 0;
    string trans = "0";
    string visib = "visible";
    private Commande? com;
    private Kioxk.Shared.Mails.Mails? mails;
    private Kioxk.Shared.Mails.Paiement? paie;
    private int i;
    private string disp_but = "block";

    private bool create = false;
    private string pint_pointer_event = "none";
    private int pintop = 1;
    private int donop = 0;
    private int formop = 1;
    private string form_pointer_event = "initial";
    private int pintdeg = 0;
    private int spanop = 0;

    protected override void OnInitialized()
    {
        com = new Commande();
        js.InvokeVoidAsync("loadevent", "contscrollJs", "bas");
    }

    bool scrollHaut = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (scrollHaut)
        {
            await js.InvokeVoidAsync("scroll", "contscrollJs", "haut");
            scrollHaut = false;
        }
    }

    bool ptog = false;
    private void pinterogToggle()
    {       
        if (!ptog)
        {
            donop = 1; formop = 0;
            pintdeg = 180;
        }
        else
        {
            donop = 0; formop = 1;
            pintdeg = 0;
        }
        ptog = !ptog;        
    }

    bool selectpass = true;
    private async Task selectBefore(MouseEventArgs e)
    {
        if (selectpass)
        {
            selectpass = false;
            spanop = 1;
            await Task.Delay(5000);
            spanop = 0;
            selectpass = true;
        }
    }

    // string dispavert = "none";
    bool pay;
    string butcoltxt = "";
    string butcol = "";
    string but = "Paiement";
    bool tog = false;
    bool pass_change = true;

    private async Task ChangeOnClick()
    {
        if (pass_change)
        {
            pass_change = false;

            if (!tog)
            {
                // pintop = 1;
                pay = true; scrollHaut = true;
                butcoltxt = "orange";
                butcol = "white";
                but = "Fermer";
                tog = true;
            }
            else
            {
                //  dispavert = "none";
                form_pointer_event = "initial";
                formop = 1;
                create = false;
                pint_pointer_event = "none";
                pintop = 1;
                butcoltxt = "";
                butcol = "";
                but = "Paiement";
                scrollHaut = false;
                mails = null;
                paie = null;
                pay = false;
                disp_but = "block";
                tog = false;

                Selected = null;
                await SelectedChanged.InvokeAsync(Selected);
                myevents.RiseSyncEvent();
            }

            await Task.Delay(1000);
            pass_change = true;
        }
    }

    private async Task CreateCommande()
    {
        create = true;
        pint_pointer_event = "none";
        form_pointer_event = "none";
        pintop = 0;

        if (Selected is not null && Seasons is not null && Prices is not null)
        {
            var sel = new HashSet<Datetime>();                                      // Convertis en entitée.
            foreach (var j in Selected)
            {
                sel.Add(new Datetime() { Dt = j });
            }

            var sea = new List<Hashset>();
            var f = 0;
            foreach (var s in Seasons)
            {
                sea.Add(new Hashset() { Hs = new HashSet<Datetime>() });
                foreach (var x in s)
                {
                    sea[f].Hs!.Add(new Datetime() { Dt = x });
                }
                f++;
            }

            var pri = new List<Int>();
            var indp = 0;
            foreach (var p in Prices)                                           // Evite le désordonnement de la liste dans la base.
            {
                pri.Add(new Int() { It = p, Index = indp });                    // enregistre l'ordre dans Index.
                indp++;
            }

            com!.Selected = sel;
            com.Seasons = sea;
            com.Prices = pri;
            com.Total = pri[0].It;

            await Send();
        }
    }

    private async Task Send()
    {
        try
        {
            Agenda.cts.Cancel();

            var id = await Http.PostAsJsonAsync("api/commande/", com);
            i = await id.Content.ReadFromJsonAsync<int>();
            Console.WriteLine("Numero de commande: " + i);
            //  await js.InvokeVoidAsync("alert", "Réservation pré-validé");

        }
        catch (Exception)
        {
            await js.InvokeVoidAsync("alert", "Echec de Connexion.!.");
        }
        finally
        {
            mails = new(i, com!.FirstName!, com.LastName!, com.Phone, com.Address!, com.Email!, com.RgtsCompl!, com.Selected!, com.Total);
            paie = new();
            //  dispavert = "block";
           // StateHasChanged();
           // _ = js.InvokeVoidAsync("scroll", "contscrollJs", "bas");
        }
    }

}

