@page "/"
@inject IJSRuntime js
@inject MyEvents myevents
@using Kioxk.Client.Pages

<img src="item/land.svg" style="position:fixed;top:20%;height:65%; margin:auto;left:0;right:0" />

<div id="header">
    <div>
        <h1>LOUEZ une maison <br /> <em>à la Réunion en 4clics</em></h1>

        <div id="lambcont">
            @for (int i = 0; i < b; i++)
            {
                <Lamb />
            }

        </div>
    </div>

    <div id="contact">
        <div>
            <div tabindex="0">
                <div>
                    <img src="/item/tel.png" />
                </div>
                <div>
                    <span>0692121212</span>
                </div>

            </div>

            <div tabindex="0">
                <div>
                    <span>location@gmail.com</span>
                </div>
                <div>
                    <img src="/item/mail.png" />
                </div>

            </div>
        </div>
    </div>

</div>

<div id="footer" />
<svg data-src="/item/Go.svg" style="position:absolute;top:25vw;left:10vw;width:14vw" onclick="myscrollTo('agenda')"> Go </svg>
<div id="maincont"> 

    <div id="pretext">
        <div>
            <Pretext />

        </div>
    </div>

    <div id="photos">
        <div>
            <Photos />

        </div>
    </div>

    <div id="hlp">
        <div>
            <Help />

        </div>
    </div>

    <div id="agenda" style="--agenda_pointer-event:@pnter">
        <div>
            <Agenda @bind-Selected="@Selected" @bind-Seasons="@Seasons" @bind-Prices="@Prices" />

        </div>
    </div>

     <div id="payment">
        <Paiement />

    </div>

    <div id="reserv">
        <div>
            <Reserv @bind-Selected="@Selected" Seasons="@Seasons" Prices="@Prices" />

        </div>
    </div>
</div>

@code {
    [Parameter]
    public HashSet<DateTime>? Selected { get; set; }
    [Parameter]
    public HashSet<DateTime>[] Seasons { get; set; } = new HashSet<DateTime>[2] { new(), new() };
    [Parameter]
    public int[] Prices { get; set; } = new int[4];

    protected override async Task OnAfterRenderAsync(bool firstRender) =>
        await js.InvokeVoidAsync("lamb", DotNetObjectReference.Create(this));

    int b;
    [JSInvokable]
    public void CSharpLamb(int ce)
    {
        b = 0;
        StateHasChanged();
        b = ce;
        StateHasChanged();
    }

    string? pnter;
    bool tog_pnter = true;

    protected override void OnInitialized()
    {
        StateHasChanged();

        myevents.MyPointer += () =>
        {
            if (tog_pnter)
            {
                tog_pnter = false;
                pnter = "none";
                StateHasChanged();
            }
            else
            {
                tog_pnter = true;
                pnter = "initial";
                StateHasChanged();
            }
        };
    }

}
